# -*- coding: utf-8 -*-
"""

AutoCloud.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VRodG5sPDRZ2WtksomlMGmA6Pl4shFVx

Link datasets: http://cs.joensuu.fi/sipu/datasets/

Paper: An evolving approach to data streams clustering based on typicality and eccentricity data analytics.pdf

"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import time


class DataCloud:
    N = 0

    def __init__(self, x):
        self.n = 1
        self.mean = x
        self.variance = 0
        self.pertinency = 1
        DataCloud.N += 1

    def addDataClaud(self, x):
        self.n = 2
        self.mean = (self.mean + x) / 2
        self.variance = ((np.linalg.norm(self.mean - x)) ** 2)

    def updateDataCloud(self, n, mean, variance):
        self.n = n
        self.mean = mean
        self.variance = variance


class AutoCloud:
    c = np.array([DataCloud(0)], dtype=DataCloud)
    alfa = np.array([0.0], dtype=float)
    intersection = np.zeros((1, 1), dtype=int)
    listIntersection = np.zeros((1), dtype=int)
    matrixIntersection = np.zeros((1, 1), dtype=int)
    relevanceList = np.zeros((1), dtype=int)
    k = 1
    #relacao_caso_status = np.array([])
    relacao_caso_status = {}
    anomalia_posicao = {}
    conta = 0
    anomalias = 0
    normais = 0

    def __init__(self, m):
        AutoCloud.m = m
        AutoCloud.c = np.array([DataCloud(0)], dtype=DataCloud)
        AutoCloud.alfa = np.array([0.0], dtype=float)
        AutoCloud.intersection = np.zeros((1, 1), dtype=int)
        AutoCloud.listIntersection = np.zeros((1), dtype=int)
        AutoCloud.relevanceList = np.zeros((1), dtype=int)
        AutoCloud.matrixIntersection = np.zeros((1, 1), dtype=int)
        AutoCloud.k = 1
        AutoCloud.classIndex = [[1], [1]]

    def mergeClouds(self):
        i = 0
        while (i < len(AutoCloud.listIntersection) - 1):
            merge = False
            j = i + 1
            while (j < len(AutoCloud.listIntersection)):
                # print("i",i,"j",j,"l",np.size(AutoCloud.listIntersection),"m",np.size(AutoCloud.matrixIntersection),"c",np.size(AutoCloud.c))
                if (AutoCloud.listIntersection[i] == 1 and AutoCloud.listIntersection[j] == 1):
                    AutoCloud.matrixIntersection[i, j] = AutoCloud.matrixIntersection[i, j] + 1;
                nI = AutoCloud.c[i].n
                nJ = AutoCloud.c[j].n
                meanI = AutoCloud.c[i].mean
                meanJ = AutoCloud.c[j].mean
                varianceI = AutoCloud.c[i].variance
                varianceJ = AutoCloud.c[j].variance
                nIntersc = AutoCloud.matrixIntersection[i, j]
                if (nIntersc > (nI - nIntersc) or nIntersc > (nJ - nIntersc)):
                    merge = True
                    # update values
                    n = nI + nJ - nIntersc
                    mean = ((nI * meanI) + (nJ * meanJ)) / (nI + nJ)
                    variance = ((nI - 1) * varianceI + (nJ - 1) * varianceJ) / (nI + nJ - 2)
                    newCloud = DataCloud(mean)
                    newCloud.updateDataCloud(n, mean, variance)
                    # atualizando lista de interseção
                    AutoCloud.listIntersection = np.concatenate((AutoCloud.listIntersection[0: i], np.array([1]),
                                                                 AutoCloud.listIntersection[i + 1: j],
                                                                 AutoCloud.listIntersection[
                                                                 j + 1: np.size(AutoCloud.listIntersection)]),
                                                                axis=None)
                    # atualizando lista de data clouds
                    AutoCloud.c = np.concatenate((AutoCloud.c[0: i], np.array([newCloud]), AutoCloud.c[i + 1: j],
                                                  AutoCloud.c[j + 1: np.size(AutoCloud.c)]), axis=None)
                    # update intersection matrix
                    M0 = AutoCloud.matrixIntersection
                    # Remover linhas
                    M1 = np.concatenate((M0[0: i, :], np.zeros((1, len(M0))), M0[i + 1: j, :], M0[j + 1: len(M0), :]))
                    # remover colunas
                    M1 = np.concatenate((M1[:, 0: i], np.zeros((len(M1), 1)), M1[:, i + 1: j], M1[:, j + 1: len(M0)]),
                                        axis=1)
                    # calculando nova coluna
                    col = (M0[:, i] + M0[:, j]) * (M0[:, i] * M0[:, j] != 0)
                    col = np.concatenate((col[0: j], col[j + 1: np.size(col)]))
                    # calculando nova linha
                    lin = (M0[i, :] + M0[j, :]) * (M0[i, :] * M0[j, :] != 0)
                    lin = np.concatenate((lin[0: j], lin[j + 1: np.size(lin)]))
                    # atualizando coluna
                    M1[:, i] = col
                    # atualizando linha
                    M1[i, :] = lin
                    M1[i, i + 1: j] = M0[i, i + 1: j] + M0[i + 1: j, j].T;
                    AutoCloud.matrixIntersection = M1
                j += 1
            if (merge):
                i = 0
            else:
                i += 1


    def run(self, X, case_id):
        AutoCloud.listIntersection = np.zeros((np.size(AutoCloud.c)), dtype=int)
        if AutoCloud.k == 1:
            AutoCloud.c[0] = DataCloud(X)
        elif AutoCloud.k == 2:
            AutoCloud.c[0].addDataClaud(X)
        elif AutoCloud.k >= 3:
            i = 0
            createCloud = True
            AutoCloud.alfa = np.zeros((np.size(AutoCloud.c)), dtype=float)
            anomalias = 0
            normais = 0
            conta = 0
            for data in AutoCloud.c:
                # Formula 13
                n = data.n + 1
                # Formula 14
                mean = ((n - 1) / n) * data.mean + (1 / n) * X
                # Formula 15
                variance = ((n - 1) / n) * data.variance + (1 / n) * ((np.linalg.norm(X - mean)) ** 2)
                # Formula 11
                eccentricity = (1 / n) + ((mean - X).T.dot(mean - X)) / (n * variance)
                typicality = 1 - eccentricity
                # Formula 12
                norm_eccentricity = eccentricity / 2
                norm_typicality = typicality / (AutoCloud.k - 2)
                # (ξ > 1 / k)
                # norm_eccentricity > (1 / n)
                # ζk m2+1, m>0 (3.17) 2k
                if norm_eccentricity > (AutoCloud.m ** 2 + 1) / (2 * n):
                    #self.relacao_caso_status = np.append(self.relacao_caso_status, np.array([[norm_eccentricity > (AutoCloud.m ** 2 + 1) / (2 * n)], [case_id]]))
                    self.relacao_caso_status[case_id] = [norm_eccentricity > (AutoCloud.m ** 2 + 1) / (2 * n), mean]
                    self.anomalias += 1
                else:
                    #self.relacao_caso_status = np.append(self.relacao_caso_status, np.array([[norm_eccentricity > (AutoCloud.m ** 2 + 1) / (2 * n)], [case_id]]))
                    self.relacao_caso_status[case_id] = [norm_eccentricity > (AutoCloud.m ** 2 + 1) / (2 * n), mean]
                    self.normais += 1
                self.conta += 1
                if (norm_eccentricity <= (AutoCloud.m ** 2 + 1) / (2 * n)):
                    data.updateDataCloud(n, mean, variance)
                    AutoCloud.alfa[i] = norm_typicality
                    createCloud = False
                    AutoCloud.listIntersection.itemset(i, 1)
                else:
                    AutoCloud.alfa[i] = norm_typicality
                    AutoCloud.listIntersection.itemset(i, 0)
                i += 1

            if (createCloud):
                AutoCloud.c = np.append(AutoCloud.c, DataCloud(X))
                AutoCloud.listIntersection = np.insert(AutoCloud.listIntersection, i, 1)
                AutoCloud.matrixIntersection = np.pad(AutoCloud.matrixIntersection, ((0, 1), (0, 1)), 'constant',
                                                      constant_values=(0))
            self.mergeClouds()
            AutoCloud.relevanceList = AutoCloud.alfa / np.sum(AutoCloud.alfa)
            AutoCloud.classIndex.append(np.argmax(AutoCloud.relevanceList))
            AutoCloud.classIndex.append(AutoCloud.alfa)

        AutoCloud.k = AutoCloud.k + 1
